# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.4
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

"""Python - это просто."""

import numpy as np

# <font size="5">
#     <b>Введение в Data Science</b>
# </font>
#
#

# Data Science - это
#
# 1) наука об изучении данных для того, чтобы данные обрели смысл
# и дали нам полезную информацию;
#
# 2) научная дисциплина, которая включает в себя извлечение
# информации из огромных объемов данных с использованием различных научных
# методов, алгоритмов и процессов. Эта наука помогает обнаруживать в
# необработанных данных скрытые закономерности;
#
# 3) междисциплинарная область, которая помогает извлекать
# знания из структурированных или неструктурированных данных.
#
# ![image.png](attachment:image.png)

# Назначение DS:
#
# - задавать правильные вопросы;
# - находить основную причину проблемы;
# - находить закономерности среди, на первый взгляд, хаотичных необработанных
# данных;
# - создавать модели для предиктивного анализа;
# - визуализировать и отображать результаты с помощью графиков, информационных
# панелей и т.д.;
# - наделять машины интеллектом;
# - определять лояльность клиентов с помощью анализа настроений;
# - принимать более качественные и быстрые решения;
# - рекомендовать правильный продукт нужному клиенту для развития бизнеса.
#
# Вехи развития данных:
# 1) Древность
#
# Около 18 ООО г. до н. э. - палки и насечки для подсчета товаров
#
# Около 2400 г. до н. э. - счеты и библиотеки
#
# 2) Появление статистики
# 1663 г. - статистический анализ данных о смертности для борьбы с чумой
#
# 1865 г. - бизнес-анализ для коммерческих целей
#
# 1880 г. - табулирующая машина Холлерита для переписи населения
#
# 3) Зарождение современного хранения данных
#
# 1926 г. - воображения о беспроводной технологии
#
# 1928 г. - изобретение метода магнитного хранения информации на ленте
#
# 4) Появление больших центров обработки данных
#
# 1965 г. - план создания первого центра обработки данных с отпечатками пальцев
# на магнитной ленте и налоговыми декларациями
#
# 5) Появление Интернета
#
# 1991 г. - рождение Интернета
#
# 1997 г. - сервис Google Search, появление терминов Data Mining (сбор данных)
# и Knowledge Discovery (извлечение информации из больших баз данных)
#
# 2000 г. - выпущен язык Python 2.0 с множеством новых функций,
# включая сборщик мусора с обнаружением циклических ссылок и поддержку Unicode
#
# 2010 г. - по статистике каждые 2 дня создается столько же данных, сколько
# было создано человечеством с начала цивилизации до 2003 г.
#
# 2011 г. - прогноз будущей нехватки профессиональных специалистов по обработке
# данных, а такие проблемы, как конфиденциальность, безопасность и
# интеллектуальная собственность
#
# 2012 г. - популяризация DS специальности
#
# 2014 г. - рост популярности мобильных устройств

# ![image.png](attachment:image.png)
#
# Искусственный интеллект - это сфера, в которой основное внимание уделяется
# созданию интеллектуальных машин, способных работать и принимать решения
# как человек.
#
# Машинное обучение - это инструмент для извлечения знаний из данных.
#
# Глубокое обучение - это создание многослойных нейронных сетей в областях,
# где требуется более продвинутый или быстрый анализ, а традиционное машинное
# обучение не справляется. Под глубиной понимается наличие более одного
# скрытого слоя нейронов в сети, которые проводят математические вычисления.
#
# Большие данные - это работа с огромными объемами часто неструктурированных
# данных.

# Проблемы, которые решает DS:
#
# ♦ обнаружение мошенничества и выявление аномалий, например изменений схемы
# снятия или расходования средств с кредитной карты клиента;
#
# ♦ целевой и персонализированный маркетинг - персональные рассылки по
# электронной почте, системы рекомендаций на сайтах магазинов;
#
# ♦ метрические прогнозы - показатели эффективности, качества рекламных
# кампаний и других мероприятий;
#
# ♦ оценка принятия решений - обработка больших объемов данных и помощь
# в принятии решения, например о выдаче кредита на основе кредитных оценок;
#
# ♦ прогнозирующее моделирование - прогнозирование столкновения метеорита
# с землей на основе астрономических данных.

# Последовательность шагов Data Science
#
# ![image.png](attachment:image.png)

# Наиболее известные профессии в Data Science следующие:
#
# ♦ специалист по данным - это профессионал, который манипулирует
# огромными объемами данных для создания серьезных бизнес-концепций,
# используя различные инструменты, методы, методологии, алгоритмы и т. д.
#
# ♦ дата-инженер - разрабатывает, конструирует, тестирует и поддерживает
# крупномасштабные системы
# обработки и базы данных.
#
# ♦ аналитик данных - ищет в данных отношения, закономерности и тенденции.
# Позже он составляет убедительную отчетность и визуализацию для анализа
# данных, чтобы принять наиболее жизнеспособные бизнес-решения.
#
# ♦ статистик - собирает, анализирует и обрабатывает качественные и
# количественные данные, используя статистические теории и методы.
#
# ♦ архитектор данных
#
# ♦ администратор данных -  должен обеспечить доступ к базе данных для всех
# пользователей. Он также следит за тем, чтобы программа работала правильно и
# была защищена от взлома.
#
# ♦ бизнес-аналитик - занимается улучшением бизнес-процессов. Он является
# связующим звеном между руководством и IТ-отделом.
#
# ♦ менеджер данных/аналитики

# Программирование - это идеи, преобразованные в пошаговые
# инструкции, понятные компьютеру. Такая пошаговая инструкция называется
# алгоритмом.
#
# В информатике алгоритм - это конечная последовательность четко определенных,
# реализуемых компьютером инструкций для решения какой-то проблемы или
# для выполнения вычислений. Алгоритмы всегда однозначны и используются для
# вычислений, обработки данных, автоматизированных решений и других задач.
#
# В компьютерных системах алгоритм - это пример логики, написанной
# разработчиками программного обеспечения для эффективного выполнения на
# целевом компьютере и для получения некоторых выходных данных по заданным
# входным данным. Оптимальный алгоритм дает более быстрые результаты, чем
# неоптимальный алгоритм для решения той же задачи.

# Алгоритмы состоят из 3 видов операторов, которые могут присутствовать в
# различных комбинациях:
#
# 1. Последовательные операторы
#
# Эти операторы выполняются один за другим,
# последовательно.
#
# 2. Условные операторы
#
# В таких программах некоторая часть программы выполняется в зависимости от
# определенного условия. Если условие верное, компьютер выполняет одну часть
# программы, а если условие неверное, то выполняется другая часть программы.
#
# 3. Циклы или итерации
#
# В некоторых программах определенный набор действий нужно выполнять снова и
# снова в зависимости от некоторого условия. Эти повторяющиеся действия
# называются итерациями. Итерация выполняется с использованием одного или
# нескольких операторов цикла, поэтому программы такого типа называются
# циклическими или повторяющимися.

# Блок-схема - графическая форма изображения алгоритмов
#
# Обозначения в блок-схемах
#
# ![image.png](attachment:image.png)

# Пример блок-схемы
#
# ![image.png](attachment:image.png)

# <font size="5"> Языки программирования
# </font>
#
# У всех языков программирования есть свои правила (синтаксис)
# и значения (семантика).
#
# Исходный код - это то, что пишут программисты на всех языках
# программирования.
# Исходный код должен быть простым, без всякой разметки и форматирования.
# Его можно написать на Windows в Notepad (Блокнот), на MacOS - TextEdit.
# Расширения подходящие - .txt, .py

# Существуют три основных способа перевода исходного кода в машинный код:
#
# ♦ компиляция;
#
# ♦ интерпретация;
#
# ♦ сочетание этих двух способов.
#
# Компилятор - это программа, преобразующая исходный код в машинный.
# Компилятор переводит или, скорее, компилирует исходный код с языка
# программирования высокого уровня на машинный язык.
#
# ![image.png](attachment:image.png)

# Интерпретатор - это компьютерная программа, которая непосредственно выполняет
# инструкции, написанные на языке программирования, без предварительной
# компиляции в программу на машинном
# языке.
#
# Интерпретаторы построчно обрабатывают исходный код при каждом запуске, а у
# пользователя на компьютере должен быть установлен необходимый интерпретатор.
#
# Некоторые языки программирования относятся к компилируемым, например С,
# С++ и Objective С.
#
# Другие языки программирования являются интерпретируемыми,
# например РНР, JavaScript и т. д.
#
# Также существуют языки программирования, в которых используется комбинация
# обоих методов, например Python, Java, С#.

# Основные различия между компиляторами и интерпретаторами:
#
# 1. И компиляторы, и интерпретаторы преобразуют исходный код (текстовые файлы)
# в машинный язык. Основное их отличие состоит в том, что компилятор
# генерирует автономную программу, написанную на машинном коде, а система
# интерпретатора выполняет действия, описанные программой высокого уровня.
#
# 2. После компиляции программы ее исходный код для запуска больше не
# требуется.
# У интерпретируемых программ исходный код требуется для запуска программы
# каждый раз.
#
# 3. Обычно интерпретируемые программы работают медленнее, чем компилируемые.
#

# <font size="5">Интегрированная среда разработки (IDE)</font>
#
# Для написания компьютерных программ существуют интегрированные среды
# разработки или IDE (Integrated Development Environment). В этих программах
# есть специальные инструменты, необходимые для написания, отладки и
# компиляции кода.
#
# Spyder IDE (Scientific Python Development Environment) - это бесплатная
# научная среда разработки на Python, которая входит в состав дистрибутива
# Anaconda (пакетное программное обеспечение для Python). В этой IDE есть
# функции редактирования, проверки, отладки и интерактивного тестирования.
#
# В левой части редактора исходного кода есть номера строк. Это позволяет нам
# быстрее находить отдельные команды кода. Также в IDE используется выделение
# синтаксиса цветом, что помогает видеть в коде ключевые слова и улучшает
# читаемость кода. Наконец, в IDE есть возможность предварительно просмотреть,
# как будет выглядеть ваш код при компиляции и запуске на реальном устройстве.

# Упражнения
#
# 1.5.1.
#
# 1. Какие предметные области входят в Data Science? Что между ними общего и
# в чем различие?
#
# Математика, статистика, алгоритмы, сбор данных, программная инженерия.
# Каждая из них является составной частью других для работы DS.
#
# 2. Как вы понимаете термин «алгоритм»? Как алгоритмы связаны с блок-схемами?
#
# Алгоритм - это последовательность/инструкция выполнения шагов и условий для
# интерпретатора кода программы. Блок-схемы графически отражают
# последовательность шагов выполнения алгоритма.
#
# 3. Какую программу можно назвать хорошей? Запишите все характеристики, какие
# удастся придумать.
#
# Дает точный результат, написана понятным высокоуровневым языком, оптимальна
# по затратам ресурсов машины и специалистов
#
# 4. Какой язык понимает компьютер?
#
# Машинный язык, который состоит в основном из последовательностей чисел (как
# правило, 0 и 1)
#
# 5. Чем языки программирования отличаются от языков, на которых мы говорим?
#
# Имеют более строгую структуру написания, нуждаются в компиляции и/или
# интерпретации
#

# 1.5.2. Правда или ложь
#
# 1. Машинное обучение - это инструмент для извлечения знаний из данных.
#
# Правда
#
# 2. Глубокое обучение - это то же самое, что машинное обучение.
#
# Ложь
#
# 3. Все инженеры-программисты также могут считаться специалистами по данным.
#
# Ложь
#
# 4. Статистика - важный инструмент для специалистов по данным.
#
# Правда
#
# 5. Компьютер может принимать решения, выходящие за рамки данных ему
# инструкций, подстраиваясь под изменения среды.
#
# Ложь
#
# 6. Компьютеры понимают языки программирования «как есть».
#
# Ложь
#
# 7. Некоторые языки программирования компилируются, некоторые
# интерпретируются, а некоторые используют и то и другое.
#
# Правда
#
# 8. Все программы выполняются последовательно.
#
# Ложь
#
# 9. В IDE есть встроенный текстовый редактор.
#
# Правда
#
# 10. Компиляторы и интерпретаторы - это такие механизмы, наподобие привода
# для компакт-дисков.
#
# Ложь
#
#

# 1.5.3. Практические задания
#
# 1. Напишите алгоритм для расчета простых процентов от некоторой суммы.
#
# Шаг 1: Начало.
#
# Шаг 2: Определите формулу расчета.
#
# Шаг 3: Введите числа для расчета суммы с простыми процентами.
#
# Шаг 4: Рассчитайте согласно формуле.
#
# Шаг 5: Конец.

mnth = int(input())  # срок расчета в месяцах (72)
invest = int(input())  # исходная сумма денег (100)
annualrt = int(input())  # годовая ставка в % (10)
percent_sum = invest * (1 + (annualrt / 100) / 12) ** mnth
print(percent_sum)

# 2. Напишите алгоритм для вычисления площади прямоугольника.
#
# Шаг 1: Начало.
#
# Шаг 2: Определите формулу расчета.
#
# Шаг 3: Ввести длину 2 прилежащих сторон.
#
# Шаг 4: Рассчитайте согласно формуле.
#
# Шаг 5: Конец.

var1 = int(input())  # сторона a
var2 = int(input())  # сторона b
Ssh = var1 * var2
print(Ssh)

# 3.Напишите алгоритм вычисления периметра круга.

Pi = np.pi
rad = int(input())
Ccr = 2 * Pi * rad
print(Ccr)

# 4. Напишите алгоритм, который находит все простые числа меньше 100.

# +
i = 1
EVENCHK = 2
nums = []
while i < 100:
    if i % EVENCHK != 0:
        nums.append(i)
    i += 1

print(nums)
# -

# 5. Напишите алгоритм превращения предложения, написанного в верхнем регистре,
# в обычный для предложений регистр.

print(input().capitalize())

# 6. Составьте блок-схему приготовления льда из кипяченой воды с помощью
# холодильника.

# Блок-схема
#
# ![image.png](attachment:image.png)

# 7. Составьте блок-схему для нахождения суммы всех четных чисел меньше ста.

# ![image-2.png](attachment:image-2.png)

# 8. Составьте блок-схему для вычисления квадрата всех нечетных чисел от 1 до
# 15 включительно.

# ![image.png](attachment:image.png)

# 9. Составьте блок-схему вывода таблицы умножения на 3.
#

# ![image.png](attachment:image.png)

# 10. Составьте блок-схему для расчета сложных процентов (с капитализацией).

# ![image.png](attachment:image.png)
